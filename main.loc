import "pybase"
import "rbase"

source "py" from "linear_algebra.py" (
   "add"
 , "matrix"
 , "matrix_multiply"
 , "scalar_multiply"
 , "sub"
 , "sum"
 , "tolist"
 , "transpose"
);

source "R" from "linear_algebra.R" (
   "random_distance_matrix"
);

export add
export matrix
export matrix_multiply
export scalar_multiply
export sub
export sum
export tolist
export transpose
export random_distance_matrix

# Matrix operations
transpose       :: Matrix a n m -> Matrix a m n;
matrix_add      :: Matrix Num n m, Matrix Num n m -> Matrix Num n m;
matrix_sub      :: Matrix Num n m, Matrix Num n m -> Matrix Num n m;
multiply        :: Matrix Num n m, Matrix Num n m -> Matrix Num n m;
matrix_multiply :: Matrix Num n m, Matrix Num m d -> Matrix Num n d;

# Scalar operations
matrix_round    :: Matrix Num n m      -> Matrix Int n m;
scalar_multiply :: Matrix Num n m, Num -> Matrix Num n m;
scalar_add      :: Matrix Num n m, Num -> Matrix Num n m;

# Summaries 
diagonal        :: Matrix a   k k -> List a k ;
matrix_sum      :: Matrix Num n m -> Num;
matrix_max      :: Matrix Num n m -> Num;
matrix_min      :: Matrix Num n m -> Num;

# Create new matrices
matrix          :: List (List a n) m -> Matrix a n m;
random_matrix   :: m:Int, n:Int -> Matrix Num m n where (m > 0, n > 0);
# random_distance_matrix :: k:Int -> m:Matrix Num k k;
# # random_distance_matrix :: k:Int -> m:Matrix Num k k where (
# #      all [m[i,i] == 0; i <- 1:k],
# #      all [m[i,j] == m[j,i]; i <- 1:k; j <- 1:k]
# #   );

# Conversions
tolist :: Matrix a n m -> List (List a n) m;

# # Convolusions and sampling (the cool stuff)
pool :: Matrix a m1 n1, (Matrix a j k -> a), j, k -> Matrix a m2 n2
    where (m2 == m1 / j, n2 == n2 / k);

# pool :: Matrix a m n, (Matrix a j k -> a), j, k -> Matrix a (m / j) (n / k)
#     where ( m % j == 0, n % k == 0 );
